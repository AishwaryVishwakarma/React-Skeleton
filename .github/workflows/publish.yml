name: Release

on:
  push:
    branches:
      - master
  release:
    types: [published]

permissions:
  contents: write
  actions: read
  deployments: write

jobs:
  build-and-publish:
    runs-on: ubuntu-22.04
    env:
      GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
      GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm install --force

      - name: Configure Git
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"

      - name: Generate Changelog and Version
        run: npm run release

      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        id: latest_release
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Get Commit Messages
        id: get_commits
        run: |
          commits=$(git log $LATEST_TAG..HEAD --pretty=format:'- %s')
          echo "RELEASE_NOTES=$commits" >> $GITHUB_ENV

      - name: Push back to GitHub
        run: |
          git push --follow-tags origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      - name: Build
        run: npm run build

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION;
            const releaseNotes = process.env.RELEASE_NOTES; // Get the commit messages as release notes
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Release v${version}`,
              body: releaseNotes, // Use the commit messages as release notes
              draft: false,
              prerelease: false,
            });
            console.log(`Release created: ${release.data.html_url}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
